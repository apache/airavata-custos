# this won't run in Ansible's integration tests until we get a domain set up
# these are here if someone wants to run the module tests locally on their own
# domain.
# Requirements:
#   Set the names in vars: on the command line, or set the following:
#   test_domain_name:       The DNS name of the domain like ansible.local
#   test_ad_domain_dn:      The DN of the domain like DC=ansible,DC=local
#   test_ad_computer_ou:    The DN of the OU where computers will be created like OU=ou1,DC=ansible,DC=local
#
# This is not a traditional role, and can't be used with ansible-test. This is a playbook. To run ensure:
#   - your collections are set up and Ansible knows where to find them ($ANSIBLE_COLLECTIONS_PATHS for example)
#   - your inventory contains a host where this can run, like a domain controller
#   - connection keywords/options/vars are set properly to connect to the host
#   - the variable win_domain_computer_testing_host contains the name of the host or the group that contains it
#
# then call this file with ansible-playbook and any extra vars or other params you need
---
- name: run win_domain_users test
  hosts: "{{ win_domain_computer_testing_host }}"
  gather_facts: no
  collections:
    - community.windows
  vars:
    test_win_domain_computer_ldap_base: "{{ test_ad_domain_dn }}"
    test_win_domain_computer_ou_path: "{{ test_ad_computer_ou }}"
    test_win_domain_computer_name: "test_computer"
    test_win_domain_domain_name: "{{ test_domain_name }}"
    test_win_domain_computer_dns_hostname: "{{ test_win_domain_computer_name }}.{{ test_domain_name }}"
    test_win_domain_computer_description: "{{ test_computer_description | default('description') }}"
  tasks:

    - name: ensure the computer is deleted before the test
      win_domain_computer:
        name: '{{ test_win_domain_computer_name }}'
        state: absent
      tags: always

    # --------------------------------------------------------------------------

    - name: Test computer with long name and distinct sam_account_name
      tags:
        - long_name
      vars:
        test_win_domain_computer_long_name: '{{ test_win_domain_computer_name }}_with_long_name'
        test_win_domain_computer_sam_account_name: '{{ test_win_domain_computer_name }}$'
        test_win_domain_computer_dns_hostname: "{{ test_win_domain_computer_long_name }}.{{ test_domain_name }}"
      block:

        # ----------------------------------------------------------------------
        - name: create computer with long name and distinct sam_account_name (check mode)
          win_domain_computer:
            name: '{{ test_win_domain_computer_long_name }}'
            dns_hostname: '{{ test_win_domain_computer_dns_hostname }}'
            sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
            ou: "{{ test_win_domain_computer_ou_path }}"
            enabled: yes
            state: present
          register: create_distinct_sam_account_name
          check_mode: yes

        - name: assert create computer with long name and distinct sam_account_name (check mode)
          assert:
            that:
              - create_distinct_sam_account_name is changed

        - name: create computer with long name and distinct sam_account_name
          win_domain_computer:
            name: '{{ test_win_domain_computer_long_name }}'
            dns_hostname: '{{ test_win_domain_computer_dns_hostname }}'
            sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
            ou: "{{ test_win_domain_computer_ou_path }}"
            enabled: yes
            state: present
          register: create_distinct_sam_account_name

        - name: get actual computer with long name and distinct sam_account_name
          ansible.windows.win_shell: |
            Import-Module ActiveDirectory
            $c = Get-ADComputer -Identity '{{ test_win_domain_computer_sam_account_name }}' -ErrorAction Stop
            if ($c.Name -ne '{{ test_win_domain_computer_long_name }}') {
              throw 'Wrong computer name in relation to sAMAccountName'
            }
          register: create_distinct_sam_account_name_check

        - name: (Idempotence) create computer with long name and distinct sam_account_name
          win_domain_computer:
            name: '{{ test_win_domain_computer_long_name }}'
            dns_hostname: '{{ test_win_domain_computer_dns_hostname }}'
            sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
            ou: "{{ test_win_domain_computer_ou_path }}"
            enabled: yes
            state: present
          register: create_distinct_sam_account_name_idempotence
          check_mode: yes

        - name: (Idempotence) assert create computer with long name and distinct sam_account_name
          assert:
            that:
            - create_distinct_sam_account_name_idempotence is not changed

      always:
        - name: ensure the test computer is deleted after the test
          win_domain_computer:
            name: '{{ test_win_domain_computer_long_name }}'
            sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
            state: absent

        # ----------------------------------------------------------------------

    - name: Test offline domain join
      tags:
        - djoin
      vars:
        test_win_domain_computer_sam_account_name: '{{ test_win_domain_computer_name }}$'
      block:
        - name: No file with blob return
          block:
            - name: Create computer with offline domain join and blob return (check mode)
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                dns_hostname: '{{ test_win_domain_computer_dns_hostname }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                ou: "{{ test_win_domain_computer_ou_path }}"
                description: "{{ test_computer_description }}"
                enabled: yes
                state: present
                offline_domain_join: output
              register: odj_result
              check_mode: yes

            - name: assert odj (check mode)
              assert:
                that:
                  - odj_result is changed
                  - odj_result.odj_blob is defined
                  - odj_result.odj_blob == ''
                  - odj_result.odj_blob_path is not defined
                  - odj_result.djoin is defined
                  - odj_result.djoin.invocation is defined

            - name: Create computer with offline domain join and blob return
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                dns_hostname: '{{ test_win_domain_computer_dns_hostname }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                ou: "{{ test_win_domain_computer_ou_path }}"
                description: "{{ test_computer_description }}"
                enabled: yes
                state: present
                offline_domain_join: output
              register: odj_result

            - name: assert odj
              assert:
                that:
                  - odj_result is changed
                  - odj_result.odj_blob is defined
                  - odj_result.odj_blob != ''
                  - odj_result.odj_blob_path is not defined
                  - odj_result.djoin is defined
                  - odj_result.djoin.invocation is defined
                  - odj_result.djoin.rc is defined
                  - odj_result.djoin.rc == 0
                  - odj_result.djoin.stdout is defined
                  - odj_result.djoin.stderr is defined

            - name: Create computer with offline domain join and blob return (idempotence)
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                dns_hostname: '{{ test_win_domain_computer_dns_hostname }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                ou: "{{ test_win_domain_computer_ou_path }}"
                description: "{{ test_computer_description }}"
                enabled: yes
                state: present
                offline_domain_join: output
              register: odj_result

            - name: assert odj
              assert:
                that:
                  - odj_result is not changed
                  - odj_result.odj_blob is not defined
                  - odj_result.odj_blob_path is not defined
                  - odj_result.djoin is not defined

          always:
            - name: ensure the test computer is deleted after the test
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                state: absent


        - name: File and blob return
          vars:
            blob_path: 'C:\Windows\Temp\blob.txt'
          block:
            - name: Create computer with offline domain join and blob file with return (check mode)
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                dns_hostname: '{{ test_win_domain_computer_dns_hostname }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                ou: "{{ test_win_domain_computer_ou_path }}"
                description: "{{ test_computer_description }}"
                enabled: yes
                state: present
                offline_domain_join: output
                odj_blob_path: "{{ blob_path }}"
              register: odj_result
              check_mode: yes

            - name: assert odj (check mode)
              assert:
                that:
                  - odj_result is changed
                  - odj_result.odj_blob is defined
                  - odj_result.odj_blob == ''
                  - odj_result.odj_blob_path is not defined
                  - odj_result.djoin is defined
                  - odj_result.djoin.invocation is defined

            - name: Create computer with offline domain join and blob file with return
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                dns_hostname: '{{ test_win_domain_computer_dns_hostname }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                ou: "{{ test_win_domain_computer_ou_path }}"
                description: "{{ test_computer_description }}"
                enabled: yes
                state: present
                offline_domain_join: output
                odj_blob_path: "{{ blob_path }}"
              register: odj_result

            - name: assert odj
              assert:
                that:
                  - odj_result is changed
                  - odj_result.odj_blob is defined
                  - odj_result.odj_blob != ''
                  - odj_result.odj_blob_path is not defined
                  - odj_result.djoin is defined
                  - odj_result.djoin.invocation is defined
                  - odj_result.djoin.rc is defined
                  - odj_result.djoin.rc == 0
                  - odj_result.djoin.stdout is defined
                  - odj_result.djoin.stderr is defined

            - name: Create computer with offline domain join and blob file with return (idempotence)
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                dns_hostname: '{{ test_win_domain_computer_dns_hostname }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                ou: "{{ test_win_domain_computer_ou_path }}"
                description: "{{ test_computer_description }}"
                enabled: yes
                state: present
                offline_domain_join: output
                odj_blob_path: "{{ blob_path }}"
              register: odj_result

            - name: assert odj
              assert:
                that:
                  - odj_result is not changed
                  - odj_result.odj_blob is not defined
                  - odj_result.odj_blob_path is not defined
                  - odj_result.djoin is not defined

          always:
            - name: ensure the test computer is deleted after the test
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                state: absent

            - name: ensure the blob file is deleted
              win_shell: |
                Remove-Item -LiteralPath '{{ blob_path }}' -Force -ErrorAction SilentlyContinue
                exit 0

        - name: Specified file return
          vars:
            blob_path: 'C:\Windows\Temp\blob.txt'
          block:
            - name: Create computer with offline domain join and blob file return with specified path (check mode)
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                dns_hostname: '{{ test_win_domain_computer_dns_hostname }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                ou: "{{ test_win_domain_computer_ou_path }}"
                description: "{{ test_computer_description }}"
                enabled: yes
                state: present
                offline_domain_join: path
                odj_blob_path: "{{ blob_path }}"
              register: odj_result
              check_mode: yes

            - name: assert odj (check mode)
              assert:
                that:
                  - odj_result is changed
                  - odj_result.odj_blob is defined
                  - odj_result.odj_blob == ''
                  - odj_result.odj_blob_path is defined
                  - odj_result.odj_blob_path == blob_path
                  - odj_result.djoin is defined
                  - odj_result.djoin.invocation is defined

            - name: Create computer with offline domain join and blob file return with specified path
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                dns_hostname: '{{ test_win_domain_computer_dns_hostname }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                ou: "{{ test_win_domain_computer_ou_path }}"
                description: "{{ test_computer_description }}"
                enabled: yes
                state: present
                offline_domain_join: path
                odj_blob_path: "{{ blob_path }}"
              register: odj_result

            - name: assert odj
              assert:
                that:
                  - odj_result is changed
                  - odj_result.odj_blob is defined
                  - odj_result.odj_blob == ''
                  - odj_result.odj_blob_path is defined
                  - odj_result.odj_blob_path == blob_path
                  - odj_result.djoin is defined
                  - odj_result.djoin.invocation is defined
                  - odj_result.djoin.rc is defined
                  - odj_result.djoin.rc == 0
                  - odj_result.djoin.stdout is defined
                  - odj_result.djoin.stderr is defined

            - name: Test ODJ File
              ansible.windows.win_shell: |
                $ErrorActionPreference = 'Stop'
                $file = '{{ odj_result.odj_blob_path }}'
                $content = Get-Content -LiteralPath $file -Raw -Encoding Unicode
                $trimmed = $content.TrimEnd("`0")
                if ($content.Length -eq $trimmed.Length) { throw 'No terminating null found' }
                # try a base64 decode to validate it is the kind of data we expect
                $bytes = [Convert]::FromBase64String($trimmed)

            - name: Create computer with offline domain join and blob file return with specified path (idempotence)
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                dns_hostname: '{{ test_win_domain_computer_dns_hostname }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                ou: "{{ test_win_domain_computer_ou_path }}"
                description: "{{ test_computer_description }}"
                enabled: yes
                state: present
                offline_domain_join: path
                odj_blob_path: "{{ blob_path }}"
              register: odj_result

            - name: assert odj
              assert:
                that:
                  - odj_result is not changed
                  - odj_result.odj_blob is not defined
                  - odj_result.odj_blob_path is not defined
                  - odj_result.djoin is not defined

          always:
            - name: ensure the test computer is deleted after the test
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                state: absent

            - name: ensure the blob file is deleted
              win_shell: |
                Remove-Item -LiteralPath '{{ blob_path }}' -Force -ErrorAction SilentlyContinue
                exit 0

        - name: Random file return
          block:
            - name: Create computer with offline domain join and random blob file return (check mode)
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                dns_hostname: '{{ test_win_domain_computer_dns_hostname }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                ou: "{{ test_win_domain_computer_ou_path }}"
                description: "{{ test_computer_description }}"
                enabled: yes
                state: present
                offline_domain_join: path
              register: odj_result
              check_mode: yes

            - name: assert odj (check mode)
              assert:
                that:
                  - odj_result is changed
                  - odj_result.odj_blob is defined
                  - odj_result.odj_blob == ''
                  - odj_result.odj_blob_path is defined
                  - odj_result.djoin is defined
                  - odj_result.djoin.invocation is defined

            - name: Create computer with offline domain join and random blob file return
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                dns_hostname: '{{ test_win_domain_computer_dns_hostname }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                ou: "{{ test_win_domain_computer_ou_path }}"
                description: "{{ test_computer_description }}"
                enabled: yes
                state: present
                offline_domain_join: path
              register: odj_result

            - name: assert odj
              assert:
                that:
                  - odj_result is changed
                  - odj_result.odj_blob is defined
                  - odj_result.odj_blob == ''
                  - odj_result.odj_blob_path is defined
                  - odj_result.djoin is defined
                  - odj_result.djoin.invocation is defined
                  - odj_result.djoin.rc is defined
                  - odj_result.djoin.rc == 0
                  - odj_result.djoin.stdout is defined
                  - odj_result.djoin.stderr is defined

            - name: This file needs to be deleted later
              set_fact:
                returned_file: "{{ odj_result.odj_blob_path }}"

            - name: Test ODJ File
              ansible.windows.win_shell: |
                $ErrorActionPreference = 'Stop'
                $file = '{{ odj_result.odj_blob_path }}'
                $content = Get-Content -LiteralPath $file -Raw -Encoding Unicode
                $trimmed = $content.TrimEnd("`0")
                if ($content.Length -eq $trimmed.Length) { throw 'No terminating null found' }
                # try a base64 decode to validate it is the kind of data we expect
                $bytes = [Convert]::FromBase64String($trimmed)

            - name: Create computer with offline domain join and random blob file return (idempotence)
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                dns_hostname: '{{ test_win_domain_computer_dns_hostname }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                ou: "{{ test_win_domain_computer_ou_path }}"
                description: "{{ test_computer_description }}"
                enabled: yes
                state: present
                offline_domain_join: path
              register: odj_result

            - name: assert odj
              assert:
                that:
                  - odj_result is not changed
                  - odj_result.odj_blob is not defined
                  - odj_result.odj_blob_path is not defined
                  - odj_result.djoin is not defined

          always:
            - name: ensure the test computer is deleted after the test
              win_domain_computer:
                name: '{{ test_win_domain_computer_name }}'
                sam_account_name: '{{ test_win_domain_computer_sam_account_name }}'
                state: absent

            - name: ensure the blob file is deleted
              win_shell: |
                Remove-Item -LiteralPath '{{ returned_file }}' -Force -ErrorAction SilentlyContinue
                exit 0
