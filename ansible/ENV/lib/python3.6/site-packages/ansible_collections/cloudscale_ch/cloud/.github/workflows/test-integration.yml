name: Collection Integration tests

on:
  schedule:
  - cron: '0 5 * * *'  # UTC
  push:
    tags: 'v*'

jobs:
  integration-test:
    name: Integration test using Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ansible_collections/cloudscale_ch/cloud
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        runner-python-version:
        - 3.6
        python-version:
        - 3.6
        - 2.7
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        path: ansible_collections/cloudscale_ch/cloud

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install ansible and collection dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible
        pip install -r tests/requirements.txt

    - name: Build and install collection
      run: |
        ansible-galaxy collection build .
        ansible-galaxy collection install *.gz

    - name: Add config file
      env:
        CONFIG_FILE: ${{ secrets.CONFIG_FILE }}
        INI_FILE: tests/integration/cloud-config-cloudscale.ini
      run: |
        echo -n "$CONFIG_FILE" > $INI_FILE && [ -s $INI_FILE ] || (>&2 echo no secrets provided; exit 1)

    - name: Ensure no other integration test is currently running
      uses: softprops/turnstyle@v0.1.3
      timeout-minutes: 60
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        same-branch-only: false

    - name: Run the tests
      run: >-
        ansible-test
        integration
        --docker
        -v
        --diff
        --color
        --allow-unsupported
        --continue-on-error
        --coverage
        cloud/cloudscale/

    - name: Generate coverage report.
      run: >-
        ansible-test
        coverage xml
        -v
        --requirements
        --group-by command
        --group-by version

    - uses: codecov/codecov-action@v1
      with:
        fail_ci_if_error: false

    - name: Send mail in case of failure
      id: send_mail
      if: ${{ failure() && github.event_name == 'schedule' }}
      shell: python3 {0}
      run: |
        from smtplib import SMTP
        from email.message import EmailMessage

        email = EmailMessage()
        email['TO'] = '${{ secrets.CRON_RCPT }}'
        email['FROM'] = 'noreply@github.com'
        email['Subject'] = 'Ansible Cloud Module Integration Test Failure'
        email.set_content("""
        Integration tests using Python ${{ matrix.python-version }} failed:
        https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        """)

        with SMTP('${{ secrets.MAILSERVER }}') as smtp:
          smtp.starttls()
          smtp.send_message(email)
