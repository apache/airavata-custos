---
- debug: msg="START junos_interface netconf/intent.yaml on connection={{ ansible_connection
    }}"

- name: get facts
  register: result
  junipernetworks.junos.junos_facts:
    provider: '{{ netconf }}'

- name: Define interface name for vSRX
  set_fact:
    intf_name: pp0
  when: result['ansible_facts']['ansible_net_model']  is search("vSRX*")

- name: Define interface name for vsrx
  set_fact:
    intf_name: pp0
  when: result['ansible_facts']['ansible_net_model']  is search("vsrx")

- name: Define interface name for vQFX
  set_fact:
    intf_name: gr-0/0/0
  when: result['ansible_facts']['ansible_net_model']  is search("vqfx*")

- name: Check intent arguments
  register: result
  junipernetworks.junos.junos_interface:
    name: '{{ intf_name }}'
    state: up
    tx_rate: ge(0)
    rx_rate: le(0)
    provider: '{{ netconf }}'

- assert:
    that:
      - result.failed == false

- name: Check intent arguments (failed condition)
  ignore_errors: true
  register: result
  junipernetworks.junos.junos_interface:
    name: '{{ intf_name }}'
    state: down
    tx_rate: gt(0)
    rx_rate: lt(0)
    provider: '{{ netconf }}'

- assert:
    that:
      - result.failed == true
      - "'state eq(down)' in result.failed_conditions"
      - "'tx_rate gt(0)' in result.failed_conditions"
      - "'rx_rate lt(0)' in result.failed_conditions"

- name: Config + intent
  register: result
  junipernetworks.junos.junos_interface:
    name: '{{ intf_name }}'
    enabled: false
    state: down
    provider: '{{ netconf }}'

- assert:
    that:
      - result.failed == false
      - result.diff.prepared is search("\+ *disable")

- name: Config + intent (fail)
  ignore_errors: true
  register: result
  junipernetworks.junos.junos_interface:
    name: '{{ intf_name }}'
    enabled: false
    state: up
    provider: '{{ netconf }}'

- assert:
    that:
      - result.failed == true
      - "'state eq(up)' in result.failed_conditions"

- name: Aggregate config + intent (pass)
  ignore_errors: true
  register: result
  junipernetworks.junos.junos_interface:
    aggregate:

      - name: '{{ intf_name }}'
        enabled: true
        state: up
    provider: '{{ netconf }}'

- assert:
    that:
      - result.failed == false

- debug: msg="END junos_interface netconf/intent.yaml on connection={{ ansible_connection
    }}"
