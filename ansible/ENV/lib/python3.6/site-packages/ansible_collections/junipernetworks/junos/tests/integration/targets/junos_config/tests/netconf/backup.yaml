---
- debug: msg="START netconf/backup.yaml on connection={{ ansible_connection }}"

- name: setup
  junipernetworks.junos.junos_config:
    lines:
      - set system host-name {{ inventory_hostname_short }}
      - delete interfaces lo0
    provider: '{{ netconf }}'

- name: collect any backup files
  find:
    paths: '{{ role_path }}/backup'
    pattern: '{{ inventory_hostname_short }}_config*'
  register: backup_files
  connection: local

- name: delete backup files
  file:
    path: '{{ item.path }}'
    state: absent
  connection: local
  with_items: '{{backup_files.files|default([])}}'

- name: configure device with config
  register: result
  junipernetworks.junos.junos_config:
    src: basic/config.j2
    backup: true
    provider: '{{ netconf }}'

- assert:
    that:
      - result.changed == true
      - result.updates is not defined

- name: collect any backup files
  find:
    paths: '{{ role_path }}/backup'
    pattern: '{{ inventory_hostname_short }}_config*'
  register: backup_files
  connection: local

- assert:
    that:
      - backup_files.files is defined

- name: delete configurable backup file path
  file:
    path: '{{ item }}'
    state: absent
  with_items:
    - '{{ role_path }}/backup_test_dir/'
    - '{{ role_path }}/backup/backup.cfg'

- name: take configuration backup in custom filename and directory path
  register: result
  junipernetworks.junos.junos_config:
    backup: true
    backup_options:
      filename: backup.cfg
      dir_path: '{{ role_path }}/backup_test_dir/{{ inventory_hostname_short }}'

- assert:
    that:
      - result.changed == true

- name: check if the backup file-1 exist
  find:
    paths: '{{ role_path }}/backup_test_dir/{{ inventory_hostname_short }}/backup.cfg'
  register: backup_file
  connection: local

- assert:
    that:
      - backup_file.files is defined

- name: take configuration backup in custom filename
  register: result
  junipernetworks.junos.junos_config:
    backup: true
    backup_options:
      filename: backup.cfg

- assert:
    that:
      - result.changed == true

- name: check if the backup file-2 exist
  find:
    paths: '{{ role_path }}/backup/backup.cfg'
  register: backup_file
  connection: local

- assert:
    that:
      - backup_file.files is defined

- name: take configuration backup in custom path and default filename
  register: result
  junipernetworks.junos.junos_config:
    backup: true
    backup_options:
      dir_path: '{{ role_path }}/backup_test_dir/{{ inventory_hostname_short }}'

- assert:
    that:
      - result.changed == true

- name: check if the backup file-3 exist
  find:
    paths: '{{ role_path }}/backup_test_dir/{{ inventory_hostname_short }}'
    pattern: '{{ inventory_hostname_short }}_config*'
  register: backup_file
  connection: local

- assert:
    that:
      - backup_file.files is defined

- debug: msg="END netconf/backup.yaml on connection={{ ansible_connection }}"
